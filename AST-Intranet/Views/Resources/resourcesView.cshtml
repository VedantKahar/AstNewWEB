@{ ViewBag.Title = "Resources";}
﻿@model List<AST_Intranet.Models.Resource>
@using System.Text;

<link rel="stylesheet" href="@Url.Content("~/Content/css/ResourcesStyle.css")">

<div class="main-content">
    <div class="content">
        <div class="resources-section">
            <h2>AST Resources</h2>

            @*give it same design as files from subfolders*@

            @foreach (var resource in Model)
            {
                <div class="resource-item" onclick="toggleResource(this, event)">
                    <div class="resource-header">
                        <a href="javascript:void(0);" class="resource-title">@resource.Name</a>
                        <p class="resource-description">Click to view all available @resource.Name</p>
                    </div>
                    <div class="resource-content">
                        @* Render files from the root folder *@
                        @if (resource.Files.Any())
                        {
                            <div class="resource-section">
                                <hr />
                                <div class="media-grid">

                                    @* Grid for document files (PDF, DOC, PPT, XLS) *@
                                    <div class='document-files'>
                                        @foreach (var file in resource.Files.Where(f => IsDocumentFile(f)))
                                        {
                                            var fileUrl = Url.Action("GetFiles", "Resources", new { folderName = resource.Name, fileName = file });
                                            //var isLongFileName = file.Length > 30 ? "long-file-name" : "";  // Example threshold for long names

                                            <div class="file-item">
                                                <a href="@fileUrl" target="_blank" loading="lazy">@Path.GetFileNameWithoutExtension(file)</a> <!-- Display file name without extension -->
                                            </div>
                                        }
                                    </div>

                                    <div class='image-files'>
                                        @* Grid for image files *@
                                        @foreach (var file in resource.Files.Where(f => IsImageFile(f)))
                                        {
                                            var fileUrl = Url.Action("GetFiles", "Resources", new { folderName = resource.Name, fileName = file });

                                            <div class="image-file">
                                                <a href="@fileUrl" target="_blank">
                                                    <img src="@fileUrl" alt="@file" loading="lazy" />
                                                </a>
                                            </div>
                                        }
                                    </div>

                                    <div class='other-files'>
                                        @* Grid for other file types (APK, installers, etc.) *@
                                        @foreach (var file in resource.Files.Where(f => IsOtherFile(f)))
                                        {
                                            var fileUrl = Url.Action("GetFiles", "Resources", new { folderName = resource.Name, fileName = file });

                                            <div class="file-item">
                                                <a href="@fileUrl" target="_blank" loading="lazy">@resource.Name</a> <!-- Display file name without extension@Path.GetFileNameWithoutExtension(file) -->
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                        @* Call the recursive function to render subfolders only if they contain files *@
                        @RenderFoldersAndFiles(resource.SubCategories, resource.Name)
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@functions { // Recursive function to display folders and files if the folder contains any files
    public IHtmlString RenderFoldersAndFiles(List<AST_Intranet.Models.Subcategory> subCategories, string parentFolder)
    {
        StringBuilder html = new StringBuilder();

        foreach (var subcategory in subCategories)
        {
            // Check if the subcategory contains files
            if (subcategory.Files != null && subcategory.Files.Any())
            {
                html.Append("<div class='resource-section'>");
                html.Append("<h4>" + subcategory.Name + "</h4>");
                html.Append("<hr>");

                // Prepare flags to check if image, video, document, or other files are present
                bool hasImages = subcategory.Files.Any(f => IsImageFile(f)); /* && GetFileSize(f) <= 9 * 1024 * 1024); */
                bool hasVideos = subcategory.Files.Any(f => IsVideoFile(f));
                bool hasDocuments = subcategory.Files.Any(f => IsDocumentFile(f));
                bool hasOtherFiles = subcategory.Files.Any(f => IsOtherFile(f));

                html.Append("<div class='media-grid'>");

                // Image Files (with lazy loading)
                if (hasImages)
                {
                    html.Append("<div class='image-files'>");

                    foreach (var file in subcategory.Files.Where(f => IsImageFile(f)))
                    {
                        var fileUrl = Url.Action("GetFiles", "Resources", new { folderName = parentFolder + "/" + subcategory.Name, fileName = file });

                        // Preload the image (move this outside the loop to avoid multiple <link> tags for the same image)
                        html.Append("<link rel='preload' href='" + fileUrl + "' as='image'>");

                        html.Append("<div class='image-file'>");
                        html.Append("<a href='" + fileUrl + "' target='_blank'>");
                        html.Append("<img src='" + fileUrl + "' alt='" + file + "' loading='lazy' />");
                        //html.Append(file);  //->display photo name
                        html.Append("</a></div>");
                    }

                    html.Append("</div>");
                }

                // Video Files (with lazy loading)
                if (hasVideos)
                {
                    html.Append("<div class='video-files'>");

                    foreach (var file in subcategory.Files.Where(f => IsVideoFile(f)))
                    {
                        var fileUrl = Url.Action("GetFiles", "Resources", new { folderName = parentFolder + "/" + subcategory.Name, fileName = file });

                        // Preload video file (move this outside the loop to avoid multiple <link> tags for the same video)
                        html.Append("<link rel='preload' href='" + fileUrl + "' as='video' type='video/mp4'>");

                        html.Append("<div class='video-file'>");
                        html.Append("<video preload='auto' controls>");
                        html.Append("<source src='" + fileUrl + "' type='video/mp4' loading='lazy' />");
                        html.Append("Your browser does not support the video tag.");
                        html.Append("</video>");
                        html.Append("</div>");
                    }

                    html.Append("</div>");
                }

                // Document Files (PDF, DOC, PPT, XLS, etc. - with lazy loading)
                if (hasDocuments)
                {
                    html.Append("<div class='document-files'>");

                    foreach (var file in subcategory.Files.Where(f => IsDocumentFile(f)))
                    {
                        var fileUrl = Url.Action("GetFiles", "Resources", new { folderName = parentFolder + "/" + subcategory.Name, fileName = file });

                        // Check if the file name is long (example threshold 30 characters)
                        //var isLongFileName = file.Length > 30 ? "long-file-name" : "";  // Adjust the length threshold as needed

                        html.Append("<div class='file-type'>");
                        html.Append("<a href='" + fileUrl + "' target='_blank'  loading='lazy'>");/*class='" + isLongFileName + "'*/
                        html.Append(Path.GetFileNameWithoutExtension(file)); // Displaying file name without extension
                        html.Append("</a></div>");
                    }

                    html.Append("</div>");
                }

                // Other Files (APK, installers, etc. - with lazy loading)
                if (hasOtherFiles)
                {
                    html.Append("<div class='other-files'>");

                    foreach (var file in subcategory.Files.Where(f => IsOtherFile(f)))
                    {
                        var fileUrl = Url.Action("GetFiles", "Resources", new { folderName = parentFolder + "/" + subcategory.Name, fileName = file });
                        var isLongFileName = file.Length > 10 ? "long-file-name" : "";  // Adjust the length threshold as needed

                        html.Append("<div class='file-type'>");
                        html.Append("<a href='" + fileUrl + "' target='_blank' class='" + isLongFileName + "' loading='lazy'>");
                        html.Append(subcategory.Name); // Displaying non-media files (APK, installers, etc.)  //html.Append(Path.GetFileNameWithoutExtension(file))
                        html.Append("</a></div>");
                    }

                    html.Append("</div>");
                }

                html.Append("</div></div>");
            }

            // Check for subfolders (subcategories) and recursively render them
            if (subcategory.SubCategories != null && subcategory.SubCategories.Any())
            {
                html.Append(RenderFoldersAndFiles(subcategory.SubCategories, parentFolder + "/" + subcategory.Name));
            }
        }

        return new HtmlString(html.ToString());
    }

    // Helper function to check if the file is an image
    private bool IsImageFile(string fileName)
    {
        string[] imageExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".jfif" };
        return imageExtensions.Any(ext => fileName.EndsWith(ext, StringComparison.OrdinalIgnoreCase));
    }

    // Helper function to check if the file is a video
    private bool IsVideoFile(string fileName)
    {
        string[] videoExtensions = new[] { ".mp4", ".avi", ".mov", ".mkv", ".wmv", ".flv", ".webm", ".mpeg", ".mpg", ".3gp" };
        return videoExtensions.Any(ext => fileName.EndsWith(ext, StringComparison.OrdinalIgnoreCase));
    }

    // Helper function to check if the file is a document
    private bool IsDocumentFile(string fileName)
    {
        string[] documentExtensions = new[] { ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".txt" };
        return documentExtensions.Any(ext => fileName.EndsWith(ext, StringComparison.OrdinalIgnoreCase));
    }

    // Helper function to check if the file is of any other type
    private bool IsOtherFile(string fileName)
    {
        string[] otherExtensions = new[] { ".exe", ".msi", ".dmg", ".iso", ".apk" };
        return otherExtensions.Any(ext => fileName.EndsWith(ext, StringComparison.OrdinalIgnoreCase));
    } }
<script>
    function toggleResource(item, event) {
        const allResources = document.querySelectorAll('.resource-item');

        // Close all other resource items
        allResources.forEach(resource => {
            if (resource !== item) {
                resource.classList.remove('open');
                resource.querySelector('.resource-content').style.maxHeight = null;
                resource.querySelector('.resource-description').style.display = 'block'; // Show description again
            }
        });

        // Toggle the clicked resource item
        const content = item.querySelector('.resource-content');
        const description = item.querySelector('.resource-description');

        // Check if the click was inside the resource-content (don't close if clicked inside it)
        const isInsideContent = content.contains(event.target);
        const isLinkClick = event.target.closest('a');  // Check if the click is inside a link

        if (item.classList.contains('open')) {
            if (!isInsideContent && !isLinkClick) { // Prevent closing if clicked inside the content or on a link
                item.classList.remove('open');
                content.style.maxHeight = null;
                description.style.display = 'block'; // Show description again when closing
            }
        } else {
            if (!isInsideContent || isLinkClick) {  // Open if not inside content, or clicked on a link
                item.classList.add('open');
                content.style.maxHeight = content.scrollHeight + "px"; // Animate opening
                description.style.display = 'none'; // Hide description when opening
            }
        }
    }
</script>

